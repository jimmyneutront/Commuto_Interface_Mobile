package com.commuto.interfacemobile.android.database

import com.commuto.interfacedesktop.db.KeyPair
import com.commuto.interfacedesktop.db.PublicKey

/**
 * A wrapper around the [CommutoInterfaceDB] class, which is auto-generated by SQLDelight.
 * @property database The [CommutoInterfaceDB] object that this class wraps.
 * @property dbQuery The [com.commuto.interfacedesktop.db.CommutoInterfaceDBQueries] property of [database], used for
 * executing database queries.
 */
internal class Database(databaseDriverFactory: DatabaseDriverFactory) {
    private val database = CommutoInterfaceDB(databaseDriverFactory.createDriver())
    private val dbQuery = database.commutoInterfaceDBQueries

    /**
     * Creates all necessary database tables.
     */
    internal fun createTables() {
        dbQuery.createPublicKeyTable()
        dbQuery.createKeyPairTable()
    }

    /**
     * Deletes everything from every database table.
     */
    internal fun clearDatabase() {
        dbQuery.transaction {
            dbQuery.removeAllKeyPairs()
            dbQuery.removeAllPublicKeys()
        }
    }

    /**
     * Returns key pairs with the specified interface ID.
     * @param interfaceId The interface ID of the key pairs to be returned.
     * @return A [List] of [KeyPair]s with interface IDs equal to [interfaceId]
     */
    internal fun selectKeyPairByInterfaceId(interfaceId: String): List<KeyPair> {
        return dbQuery.selectKeyPairByInterfaceId(interfaceId).executeAsList()
    }

    /**
     * Returns public keys with the specified interface ID.
     * @param interfaceId The interface ID of the public keys to be returned.
     * @return A [List] of [PublicKey]s with interface IDs equal to [interfaceId]
     */
    internal fun selectPublicKeyByInterfaceId(interfaceId: String): List<PublicKey> {
        return dbQuery.selectPublicKeyByInterfaceId(interfaceId).executeAsList()
    }

    /**
     * Inserts a [KeyPair] into the database.
     * @param keyPair The [KeyPair] to be inserted in the database.
     */
    internal fun insertKeyPair(keyPair: KeyPair) {
        dbQuery.insertKeyPair(
            interfaceId = keyPair.interfaceId,
            publicKey = keyPair.publicKey,
            privateKey = keyPair.privateKey,
        )
    }

    /**
     * Inserts a [PublicKey] into the database.
     * @param publicKey The [PublicKey] to be inserted in the database.
     */
    internal fun insertPublicKey(publicKey: PublicKey) {
        dbQuery.insertPublicKey(
            interfaceId = publicKey.interfaceId,
            publicKey = publicKey.publicKey,
        )
    }
}
package com.commuto.interfacemobile.android.database

import com.commuto.interfacedesktop.db.*

/**
 * A wrapper around the [CommutoInterfaceDB] class, which is auto-generated by SQLDelight.
 * @property database The [CommutoInterfaceDB] object that this class wraps.
 * @property dbQuery The [com.commuto.interfacedesktop.db.CommutoInterfaceDBQueries] property of [database], used for
 * executing database queries.
 */
internal class Database(databaseDriverFactory: DatabaseDriverFactory) {
    private val database = CommutoInterfaceDB(databaseDriverFactory.createDriver())
    private val dbQuery = database.commutoInterfaceDBQueries

    /**
     * Creates all necessary database tables.
     */
    internal fun createTables() {
        dbQuery.createOfferTable()
        dbQuery.createSettlementMethodTable()
        dbQuery.createPublicKeyTable()
        dbQuery.createKeyPairTable()
    }

    /**
     * Deletes everything from every database table.
     */
    internal fun clearDatabase() {
        dbQuery.transaction {
            dbQuery.removeAllOffers()
            dbQuery.removeAllSettlementMethods()
            dbQuery.removeAllKeyPairs()
            dbQuery.removeAllPublicKeys()
        }
    }

    /**
     * Returns [Offer](https://www.commuto.xyz/docs/technical-reference/core-tec-ref#offer)s with the specified offer
     * ID.
     * @param id The ID of the Offers to be returned.
     * @return A [List] of [Offer]s with offer IDs equal to [id].
     */
    internal fun selectOfferByOfferId(id: String): List<Offer> {
        return dbQuery.selectOfferByOfferId(id).executeAsList()
    }

    /**
     * Returns [SettlementMethod]s with the specified offer ID.
     * @param id The offer ID associated with the settlement methods to be returned.
     * @return A [List] of [SettlementMethod]s
     */
    internal fun selectSettlementMethodByOfferId(id: String): List<SettlementMethod> {
        return dbQuery.selectSettlementMethodByOfferId(id).executeAsList()
    }

    /**
     * Returns key pairs with the specified interface ID.
     * @param interfaceId The interface ID of the key pairs to be returned.
     * @return A [List] of [KeyPair]s with interface IDs equal to [interfaceId]
     */
    internal fun selectKeyPairByInterfaceId(interfaceId: String): List<KeyPair> {
        return dbQuery.selectKeyPairByInterfaceId(interfaceId).executeAsList()
    }

    /**
     * Returns public keys with the specified interface ID.
     * @param interfaceId The interface ID of the public keys to be returned.
     * @return A [List] of [PublicKey]s with interface IDs equal to [interfaceId]
     */
    internal fun selectPublicKeyByInterfaceId(interfaceId: String): List<PublicKey> {
        return dbQuery.selectPublicKeyByInterfaceId(interfaceId).executeAsList()
    }

    /**
     * Inserts an [Offer] into the database.
     * @param offer The [Offer] to be inserted in the database.
     */
    internal fun insertOffer(offer: Offer) {
        dbQuery.insertOffer(
            offerId = offer.offerId,
            isCreated = offer.isCreated,
            isTaken = offer.isTaken,
            maker = offer.maker,
            interfaceId = offer.interfaceId,
            stablecoin = offer.stablecoin,
            amountLowerBound = offer.amountLowerBound,
            amountUpperBound = offer.amountUpperBound,
            securityDepositAmount = offer.securityDepositAmount,
            serviceFeeRate = offer.serviceFeeRate,
            onChainDirection = offer.onChainDirection,
            onChainPrice = offer.onChainPrice,
            protocolVersion = offer.protocolVersion
        )
    }

    /**
     * Inserts a [SettlementMethod] into the database.
     * @param settlementMethod The [SettlementMethod] to be inserted in the database.
     */
    internal fun insertSettlementMethod(settlementMethod: SettlementMethod) {
        dbQuery.insertSettlementMethod(
            offerId = settlementMethod.offerId,
            settlementMethod = settlementMethod.settlementMethod
        )
    }

    /**
     * Inserts a [KeyPair] into the database.
     * @param keyPair The [KeyPair] to be inserted in the database.
     */
    internal fun insertKeyPair(keyPair: KeyPair) {
        dbQuery.insertKeyPair(
            interfaceId = keyPair.interfaceId,
            publicKey = keyPair.publicKey,
            privateKey = keyPair.privateKey,
        )
    }

    /**
     * Inserts a [PublicKey] into the database.
     * @param publicKey The [PublicKey] to be inserted in the database.
     */
    internal fun insertPublicKey(publicKey: PublicKey) {
        dbQuery.insertPublicKey(
            interfaceId = publicKey.interfaceId,
            publicKey = publicKey.publicKey,
        )
    }

    /**
     * Updates the price of an [Offer] in the database.
     * @param id The id of the [Offer] with the price to be updated.
     * @param price The new price of the [Offer].
     */
    internal fun updateOfferPrice(id: String, price: String) {
        dbQuery.updateOfferPriceByOfferId(
            onChainPrice = price,
            offerId = id
        )
    }

    /**
     * Deletes all [Offer]s with the specified offer ID from the database.
     * @param id The offer ID of the [Offer]s to be deleted.
     */
    internal fun deleteOffer(id: String) {
        dbQuery.deleteOfferByOfferId(
            offerId = id
        )
    }

    /**
     * Deletes all [SettlementMethod]s with the specified offer ID from the database.
     * @param id The offer ID of the [SettlementMethod]s to be deleted.
     */
    internal fun deleteSettlementMethods(id: String) {
        dbQuery.deleteSettlementMethodByOfferId(
            offerId = id
        )
    }

}